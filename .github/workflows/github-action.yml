# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름
name: Spring Boot & Gradle CI/CD

# Event Trigger
# master branch에 push가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
# Testing 0413

on:
  push:
    branches: [ main ]

# 환경 변수 설정
env:
  S3_BUCKET_NAME: 2ntrip-backend-refactor-deploy
  CODEDEPLOY_APPLICATION_NAME: 2ntrip-backend-refactor
  DEPLOYMENT_GROUP_NAME: 2ntrip-backend-refactor

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Redis Server in GitHub Actions
        uses: supercharge/redis-github-action@1.5.0

      - name: MongoDB in GitHub Actions
        uses: supercharge/mongodb-github-action@1.9.0

      - name: Create Properties Files
        run: mkdir /home/ec2-user/properties ; cd /home/ec2-user/properties ; touch application.properties ; touch application-aws-s3.properties ; touch application-mongodb.properties ; touch application-redis.properties

      - name: Load Application Properties
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > /home/ec2-user/properties/application.properties

      - name: Load Application AWS S3 Properties
        run: echo "${{ secrets.APPLICATION_AWS_S3_PROPERTIES }}" > /home/ec2-user/properties/application-aws-s3.properties

      - name: Load Application MongoDB Properties
        run: echo "${{ secrets.APPLICATION_MONGO_PROPERTIES }}" > /home/ec2-user/properties/application-mongodb.properties

      - name: Load Application Redis Properties
        run: echo "${{ secrets.APPLICATION_REDIS_PROPERTIES }}" > /home/ec2-user/properties/application-redis.properties

      - name: Load Application Security Properties
        run: echo "${{ secrets.APPLICATION_SECURITY_PROPERTIES }}" > /home/ec2-user/properties/application-security.properties

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml Copy
      - name: Copy appspec
        run: cp ./appspec.yml ./deploy/

      # script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

      - name: Grant execute permission for scripts
        run: chmod +x ./scripts/*

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./2ntrip-api-refactor-deploy.zip ./deploy/

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./2ntrip-api-refactor-deploy.zip s3://2ntrip-backend-refactor-deploy/

      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name $CODEDEPLOY_APPLICATION_NAME \
          --deployment-group-name $DEPLOYMENT_GROUP_NAME \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=2ntrip-api-refactor-deploy.zip \
          --region ap-northeast-2
